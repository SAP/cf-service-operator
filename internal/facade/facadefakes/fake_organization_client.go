/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and cf-service-operator contributors
SPDX-License-Identifier: Apache-2.0
*/
// Code generated by counterfeiter. DO NOT EDIT.
package facadefakes

import (
	"context"
	"sync"

	"github.com/sap/cf-service-operator/internal/facade"
)

type FakeOrganizationClient struct {
	AddAuditorStub        func(context.Context, string, string) error
	addAuditorMutex       sync.RWMutex
	addAuditorArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	addAuditorReturns struct {
		result1 error
	}
	addAuditorReturnsOnCall map[int]struct {
		result1 error
	}
	AddDeveloperStub        func(context.Context, string, string) error
	addDeveloperMutex       sync.RWMutex
	addDeveloperArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	addDeveloperReturns struct {
		result1 error
	}
	addDeveloperReturnsOnCall map[int]struct {
		result1 error
	}
	AddManagerStub        func(context.Context, string, string) error
	addManagerMutex       sync.RWMutex
	addManagerArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	addManagerReturns struct {
		result1 error
	}
	addManagerReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSpaceStub        func(context.Context, string, string, int64) error
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}
	createSpaceReturns struct {
		result1 error
	}
	createSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSpaceStub        func(context.Context, string) error
	deleteSpaceMutex       sync.RWMutex
	deleteSpaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteSpaceReturns struct {
		result1 error
	}
	deleteSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	GetSpaceStub        func(context.Context, string) (*facade.Space, error)
	getSpaceMutex       sync.RWMutex
	getSpaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getSpaceReturns struct {
		result1 *facade.Space
		result2 error
	}
	getSpaceReturnsOnCall map[int]struct {
		result1 *facade.Space
		result2 error
	}
	UpdateSpaceStub        func(context.Context, string, string, int64) error
	updateSpaceMutex       sync.RWMutex
	updateSpaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}
	updateSpaceReturns struct {
		result1 error
	}
	updateSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrganizationClient) AddAuditor(arg1 context.Context, arg2 string, arg3 string) error {
	fake.addAuditorMutex.Lock()
	ret, specificReturn := fake.addAuditorReturnsOnCall[len(fake.addAuditorArgsForCall)]
	fake.addAuditorArgsForCall = append(fake.addAuditorArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddAuditorStub
	fakeReturns := fake.addAuditorReturns
	fake.recordInvocation("AddAuditor", []interface{}{arg1, arg2, arg3})
	fake.addAuditorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationClient) AddAuditorCallCount() int {
	fake.addAuditorMutex.RLock()
	defer fake.addAuditorMutex.RUnlock()
	return len(fake.addAuditorArgsForCall)
}

func (fake *FakeOrganizationClient) AddAuditorCalls(stub func(context.Context, string, string) error) {
	fake.addAuditorMutex.Lock()
	defer fake.addAuditorMutex.Unlock()
	fake.AddAuditorStub = stub
}

func (fake *FakeOrganizationClient) AddAuditorArgsForCall(i int) (context.Context, string, string) {
	fake.addAuditorMutex.RLock()
	defer fake.addAuditorMutex.RUnlock()
	argsForCall := fake.addAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOrganizationClient) AddAuditorReturns(result1 error) {
	fake.addAuditorMutex.Lock()
	defer fake.addAuditorMutex.Unlock()
	fake.AddAuditorStub = nil
	fake.addAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) AddAuditorReturnsOnCall(i int, result1 error) {
	fake.addAuditorMutex.Lock()
	defer fake.addAuditorMutex.Unlock()
	fake.AddAuditorStub = nil
	if fake.addAuditorReturnsOnCall == nil {
		fake.addAuditorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addAuditorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) AddDeveloper(arg1 context.Context, arg2 string, arg3 string) error {
	fake.addDeveloperMutex.Lock()
	ret, specificReturn := fake.addDeveloperReturnsOnCall[len(fake.addDeveloperArgsForCall)]
	fake.addDeveloperArgsForCall = append(fake.addDeveloperArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddDeveloperStub
	fakeReturns := fake.addDeveloperReturns
	fake.recordInvocation("AddDeveloper", []interface{}{arg1, arg2, arg3})
	fake.addDeveloperMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationClient) AddDeveloperCallCount() int {
	fake.addDeveloperMutex.RLock()
	defer fake.addDeveloperMutex.RUnlock()
	return len(fake.addDeveloperArgsForCall)
}

func (fake *FakeOrganizationClient) AddDeveloperCalls(stub func(context.Context, string, string) error) {
	fake.addDeveloperMutex.Lock()
	defer fake.addDeveloperMutex.Unlock()
	fake.AddDeveloperStub = stub
}

func (fake *FakeOrganizationClient) AddDeveloperArgsForCall(i int) (context.Context, string, string) {
	fake.addDeveloperMutex.RLock()
	defer fake.addDeveloperMutex.RUnlock()
	argsForCall := fake.addDeveloperArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOrganizationClient) AddDeveloperReturns(result1 error) {
	fake.addDeveloperMutex.Lock()
	defer fake.addDeveloperMutex.Unlock()
	fake.AddDeveloperStub = nil
	fake.addDeveloperReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) AddDeveloperReturnsOnCall(i int, result1 error) {
	fake.addDeveloperMutex.Lock()
	defer fake.addDeveloperMutex.Unlock()
	fake.AddDeveloperStub = nil
	if fake.addDeveloperReturnsOnCall == nil {
		fake.addDeveloperReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addDeveloperReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) AddManager(arg1 context.Context, arg2 string, arg3 string) error {
	fake.addManagerMutex.Lock()
	ret, specificReturn := fake.addManagerReturnsOnCall[len(fake.addManagerArgsForCall)]
	fake.addManagerArgsForCall = append(fake.addManagerArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddManagerStub
	fakeReturns := fake.addManagerReturns
	fake.recordInvocation("AddManager", []interface{}{arg1, arg2, arg3})
	fake.addManagerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationClient) AddManagerCallCount() int {
	fake.addManagerMutex.RLock()
	defer fake.addManagerMutex.RUnlock()
	return len(fake.addManagerArgsForCall)
}

func (fake *FakeOrganizationClient) AddManagerCalls(stub func(context.Context, string, string) error) {
	fake.addManagerMutex.Lock()
	defer fake.addManagerMutex.Unlock()
	fake.AddManagerStub = stub
}

func (fake *FakeOrganizationClient) AddManagerArgsForCall(i int) (context.Context, string, string) {
	fake.addManagerMutex.RLock()
	defer fake.addManagerMutex.RUnlock()
	argsForCall := fake.addManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOrganizationClient) AddManagerReturns(result1 error) {
	fake.addManagerMutex.Lock()
	defer fake.addManagerMutex.Unlock()
	fake.AddManagerStub = nil
	fake.addManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) AddManagerReturnsOnCall(i int, result1 error) {
	fake.addManagerMutex.Lock()
	defer fake.addManagerMutex.Unlock()
	fake.AddManagerStub = nil
	if fake.addManagerReturnsOnCall == nil {
		fake.addManagerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addManagerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) CreateSpace(arg1 context.Context, arg2 string, arg3 string, arg4 int64) error {
	fake.createSpaceMutex.Lock()
	ret, specificReturn := fake.createSpaceReturnsOnCall[len(fake.createSpaceArgsForCall)]
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateSpaceStub
	fakeReturns := fake.createSpaceReturns
	fake.recordInvocation("CreateSpace", []interface{}{arg1, arg2, arg3, arg4})
	fake.createSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationClient) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeOrganizationClient) CreateSpaceCalls(stub func(context.Context, string, string, int64) error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = stub
}

func (fake *FakeOrganizationClient) CreateSpaceArgsForCall(i int) (context.Context, string, string, int64) {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	argsForCall := fake.createSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeOrganizationClient) CreateSpaceReturns(result1 error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) CreateSpaceReturnsOnCall(i int, result1 error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	if fake.createSpaceReturnsOnCall == nil {
		fake.createSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) DeleteSpace(arg1 context.Context, arg2 string) error {
	fake.deleteSpaceMutex.Lock()
	ret, specificReturn := fake.deleteSpaceReturnsOnCall[len(fake.deleteSpaceArgsForCall)]
	fake.deleteSpaceArgsForCall = append(fake.deleteSpaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteSpaceStub
	fakeReturns := fake.deleteSpaceReturns
	fake.recordInvocation("DeleteSpace", []interface{}{arg1, arg2})
	fake.deleteSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationClient) DeleteSpaceCallCount() int {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return len(fake.deleteSpaceArgsForCall)
}

func (fake *FakeOrganizationClient) DeleteSpaceCalls(stub func(context.Context, string) error) {
	fake.deleteSpaceMutex.Lock()
	defer fake.deleteSpaceMutex.Unlock()
	fake.DeleteSpaceStub = stub
}

func (fake *FakeOrganizationClient) DeleteSpaceArgsForCall(i int) (context.Context, string) {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	argsForCall := fake.deleteSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrganizationClient) DeleteSpaceReturns(result1 error) {
	fake.deleteSpaceMutex.Lock()
	defer fake.deleteSpaceMutex.Unlock()
	fake.DeleteSpaceStub = nil
	fake.deleteSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) DeleteSpaceReturnsOnCall(i int, result1 error) {
	fake.deleteSpaceMutex.Lock()
	defer fake.deleteSpaceMutex.Unlock()
	fake.DeleteSpaceStub = nil
	if fake.deleteSpaceReturnsOnCall == nil {
		fake.deleteSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) GetSpace(arg1 context.Context, arg2 string) (*facade.Space, error) {
	fake.getSpaceMutex.Lock()
	ret, specificReturn := fake.getSpaceReturnsOnCall[len(fake.getSpaceArgsForCall)]
	fake.getSpaceArgsForCall = append(fake.getSpaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSpaceStub
	fakeReturns := fake.getSpaceReturns
	fake.recordInvocation("GetSpace", []interface{}{arg1, arg2})
	fake.getSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrganizationClient) GetSpaceCallCount() int {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	return len(fake.getSpaceArgsForCall)
}

func (fake *FakeOrganizationClient) GetSpaceCalls(stub func(context.Context, string) (*facade.Space, error)) {
	fake.getSpaceMutex.Lock()
	defer fake.getSpaceMutex.Unlock()
	fake.GetSpaceStub = stub
}

func (fake *FakeOrganizationClient) GetSpaceArgsForCall(i int) (context.Context, string) {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	argsForCall := fake.getSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrganizationClient) GetSpaceReturns(result1 *facade.Space, result2 error) {
	fake.getSpaceMutex.Lock()
	defer fake.getSpaceMutex.Unlock()
	fake.GetSpaceStub = nil
	fake.getSpaceReturns = struct {
		result1 *facade.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeOrganizationClient) GetSpaceReturnsOnCall(i int, result1 *facade.Space, result2 error) {
	fake.getSpaceMutex.Lock()
	defer fake.getSpaceMutex.Unlock()
	fake.GetSpaceStub = nil
	if fake.getSpaceReturnsOnCall == nil {
		fake.getSpaceReturnsOnCall = make(map[int]struct {
			result1 *facade.Space
			result2 error
		})
	}
	fake.getSpaceReturnsOnCall[i] = struct {
		result1 *facade.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeOrganizationClient) UpdateSpace(arg1 context.Context, arg2 string, arg3 string, arg4 int64) error {
	fake.updateSpaceMutex.Lock()
	ret, specificReturn := fake.updateSpaceReturnsOnCall[len(fake.updateSpaceArgsForCall)]
	fake.updateSpaceArgsForCall = append(fake.updateSpaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateSpaceStub
	fakeReturns := fake.updateSpaceReturns
	fake.recordInvocation("UpdateSpace", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationClient) UpdateSpaceCallCount() int {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	return len(fake.updateSpaceArgsForCall)
}

func (fake *FakeOrganizationClient) UpdateSpaceCalls(stub func(context.Context, string, string, int64) error) {
	fake.updateSpaceMutex.Lock()
	defer fake.updateSpaceMutex.Unlock()
	fake.UpdateSpaceStub = stub
}

func (fake *FakeOrganizationClient) UpdateSpaceArgsForCall(i int) (context.Context, string, string, int64) {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	argsForCall := fake.updateSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeOrganizationClient) UpdateSpaceReturns(result1 error) {
	fake.updateSpaceMutex.Lock()
	defer fake.updateSpaceMutex.Unlock()
	fake.UpdateSpaceStub = nil
	fake.updateSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) UpdateSpaceReturnsOnCall(i int, result1 error) {
	fake.updateSpaceMutex.Lock()
	defer fake.updateSpaceMutex.Unlock()
	fake.UpdateSpaceStub = nil
	if fake.updateSpaceReturnsOnCall == nil {
		fake.updateSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrganizationClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addAuditorMutex.RLock()
	defer fake.addAuditorMutex.RUnlock()
	fake.addDeveloperMutex.RLock()
	defer fake.addDeveloperMutex.RUnlock()
	fake.addManagerMutex.RLock()
	defer fake.addManagerMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOrganizationClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ facade.OrganizationClient = new(FakeOrganizationClient)
