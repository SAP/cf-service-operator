/*
SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and cf-service-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sap/cf-service-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpaceLister helps list Spaces.
// All objects returned here must be treated as read-only.
type SpaceLister interface {
	// List lists all Spaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Space, err error)
	// Spaces returns an object that can list and get Spaces.
	Spaces(namespace string) SpaceNamespaceLister
	SpaceListerExpansion
}

// spaceLister implements the SpaceLister interface.
type spaceLister struct {
	indexer cache.Indexer
}

// NewSpaceLister returns a new SpaceLister.
func NewSpaceLister(indexer cache.Indexer) SpaceLister {
	return &spaceLister{indexer: indexer}
}

// List lists all Spaces in the indexer.
func (s *spaceLister) List(selector labels.Selector) (ret []*v1alpha1.Space, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Space))
	})
	return ret, err
}

// Spaces returns an object that can list and get Spaces.
func (s *spaceLister) Spaces(namespace string) SpaceNamespaceLister {
	return spaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpaceNamespaceLister helps list and get Spaces.
// All objects returned here must be treated as read-only.
type SpaceNamespaceLister interface {
	// List lists all Spaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Space, err error)
	// Get retrieves the Space from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Space, error)
	SpaceNamespaceListerExpansion
}

// spaceNamespaceLister implements the SpaceNamespaceLister
// interface.
type spaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Spaces in the indexer for a given namespace.
func (s spaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Space, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Space))
	})
	return ret, err
}

// Get retrieves the Space from the indexer for a given namespace and name.
func (s spaceNamespaceLister) Get(name string) (*v1alpha1.Space, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("space"), name)
	}
	return obj.(*v1alpha1.Space), nil
}
